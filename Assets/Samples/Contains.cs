/*
 * File Name:               Contains.cs
 * 
 * Description:             普通类
 * Author:                  lisiyu <576603306@qq.com>

 * Create Date:             2017/12/16
 */

using System.Collections.Generic;

[XTest("List/Array/HashSet Contains 方法")]
public class Contains 
{
    private int count = 1000;
    private Contains_int value_int;
    private Contains_enum value_enum;
    private Contains_class value_class;
    public Contains()
    {
        value_int = new Contains_int(count);
        value_enum = new Contains_enum(count);
        value_class = new Contains_class(count);
    }

#region int
    [XTest("List<int>")]
    public void test_List_int()
    {
        value_int.value_List.Contains(value_int.value_target);
    }

    [XTest("int[]")]
    public void test_Array_int()
    {
        for (int i = 0; i < count; i++)
        {
            if (value_int.value_Array[i] == value_int.value_target)
                break;
        }
    }

    [XTest("HashSet<int>")]
    public void test_HashSet_int()
    {
        value_int.value_HashSet.Contains(value_int.value_target);
    }

    private class Contains_int
    {
        public List<int> value_List;
        public int[] value_Array;
        public HashSet<int> value_HashSet;
        public int value_target;

        public Contains_int(int count)
        {
            value_List = new List<int>(count);
            value_Array = new int[count];
            value_HashSet = new HashSet<int>();

            var index = XRandom.Next(0, count);
            for (int i = 0; i < count; i++)
            {
                var tmpValue = XRandom.Next();
                value_List.Add(tmpValue);
                value_Array[i] = tmpValue;
                value_HashSet.Add(tmpValue);

                if (index == i)
                    value_target = tmpValue;
            }
        }
    }
    #endregion int

    #region enum
    [XTest("List<enum>")]
    public void test_List_enum()
    {
        value_enum.value_List.Contains(value_enum.value_target);
    }

    [XTest("enum[]")]
    public void test_Array_enum()
    {
        for (int i = 0; i < count; i++)
        {
            if (value_enum.value_Array[i] == value_enum.value_target)
                break;
        }
    }

    [XTest("HashSet<enum>")]
    public void test_HashSet_enum()
    {
        value_enum.value_HashSet.Contains(value_enum.value_target);
    }

    public class Contains_enum
    {
        public enum EnumContains
        {
            a0 = 1,
            b0,
            c0,
            d0,
            e0,
            a01,
            b01,
            c01,
            d01,
            e01,
            a02,
            b02,
            c02,
            d02,
            e02,
            a03,
            b03,
            c03,
            d03,
            e03,
            a04,
            b04,
            c04,
            d04,
            e04,
            a05,
            b05,
            c05,
            d05,
            e05,
            a1,
            b1,
            c1,
            d1,
            e1,
            a11,
            b11,
            c11,
            d11,
            e11,
            a12,
            b12,
            c12,
            d12,
            e12,
            a13,
            b13,
            c13,
            d13,
            e13,
            a14,
            b14,
            c14,
            d14,
            e14,
            a15,
            b15,
            c15,
            d15,
            e15,
            a2,
            b2,
            c2,
            d2,
            e2,
            a21,
            b21,
            c21,
            d21,
            e21,
            a22,
            b22,
            c22,
            d22,
            e22,
            a23,
            b23,
            c23,
            d23,
            e23,
            a24,
            b24,
            c24,
            d24,
            e24,
            a25,
            b25,
            c25,
            d25,
            e25,
            a3,
            b3,
            c3,
            d3,
            e3,
            a31,
            b31,
            c31,
            d31,
            e31,
            a32,
            b32,
            c32,
            d32,
            e32,
            a33,
            b33,
            c33,
            d33,
            e33,
            a34,
            b34,
            c34,
            d34,
            e34,
            a35,
            b35,
            c35,
            d35,
            e35,
            a4,
            b4,
            c4,
            d4,
            e4,
            a41,
            b41,
            c41,
            d41,
            e41,
            a42,
            b42,
            c42,
            d42,
            e42,
            a43,
            b43,
            c43,
            d43,
            e43,
            a44,
            b44,
            c44,
            d44,
            e44,
            a45,
            b45,
            c45,
            d45,
            e45,
            a5,
            b5,
            c5,
            d5,
            e5,
            a51,
            b51,
            c51,
            d51,
            e51,
            a52,
            b52,
            c52,
            d52,
            e52,
            a53,
            b53,
            c53,
            d53,
            e53,
            a54,
            b54,
            c54,
            d54,
            e54,
            a55,
            b55,
            c55,
            d55,
            e55,
            a61,
            b61,
            c61,
            d61,
            e61,
            a62,
            b62,
            c62,
            d62,
            e62,
            a63,
            b63,
            c63,
            d63,
            e63,
            a64,
            b64,
            c64,
            d64,
            e64,
            a010 = 201,
            b010,
            c010,
            d010,
            e010,
            a0101,
            b0101,
            c0101,
            d0101,
            e0101,
            a0102,
            b0102,
            c0102,
            d0102,
            e0102,
            a0103,
            b0103,
            c0103,
            d0103,
            e0103,
            a0104,
            b0104,
            c0104,
            d0104,
            e0104,
            a0105,
            b0105,
            c0105,
            d0105,
            e0105,
            a011,
            b011,
            c011,
            d011,
            e011,
            a0111,
            b0111,
            c0111,
            d0111,
            e0111,
            a0112,
            b0112,
            c0112,
            d0112,
            e0112,
            a0113,
            b0113,
            c0113,
            d0113,
            e0113,
            a0114,
            b0114,
            c0114,
            d0114,
            e0114,
            a0115,
            b0115,
            c0115,
            d0115,
            e0115,
            a012,
            b012,
            c012,
            d012,
            e012,
            a0121,
            b0121,
            c0121,
            d0121,
            e0121,
            a0122,
            b0122,
            c0122,
            d0122,
            e0122,
            a0123,
            b0123,
            c0123,
            d0123,
            e0123,
            a0124,
            b0124,
            c0124,
            d0124,
            e0124,
            a0125,
            b0125,
            c0125,
            d0125,
            e0125,
            a013,
            b013,
            c013,
            d013,
            e013,
            a0131,
            b0131,
            c0131,
            d0131,
            e0131,
            a0132,
            b0132,
            c0132,
            d0132,
            e0132,
            a0133,
            b0133,
            c0133,
            d0133,
            e0133,
            a0134,
            b0134,
            c0134,
            d0134,
            e0134,
            a0135,
            b0135,
            c0135,
            d0135,
            e0135,
            a014,
            b014,
            c014,
            d014,
            e014,
            a0141,
            b0141,
            c0141,
            d0141,
            e0141,
            a0142,
            b0142,
            c0142,
            d0142,
            e0142,
            a0143,
            b0143,
            c0143,
            d0143,
            e0143,
            a0144,
            b0144,
            c0144,
            d0144,
            e0144,
            a0145,
            b0145,
            c0145,
            d0145,
            e0145,
            a015,
            b015,
            c015,
            d015,
            e015,
            a0151,
            b0151,
            c0151,
            d0151,
            e0151,
            a0152,
            b0152,
            c0152,
            d0152,
            e0152,
            a0153,
            b0153,
            c0153,
            d0153,
            e0153,
            a0154,
            b0154,
            c0154,
            d0154,
            e0154,
            a0155,
            b0155,
            c0155,
            d0155,
            e0155,
            a0161,
            b0161,
            c0161,
            d0161,
            e0161,
            a0162,
            b0162,
            c0162,
            d0162,
            e0162,
            a0163,
            b0163,
            c0163,
            d0163,
            e0163,
            a0164,
            b0164,
            c0164,
            d0164,
            e0164,
            a020 = 401,
            b020,
            c020,
            d020,
            e020,
            a0201,
            b0201,
            c0201,
            d0201,
            e0201,
            a0202,
            b0202,
            c0202,
            d0202,
            e0202,
            a0203,
            b0203,
            c0203,
            d0203,
            e0203,
            a0204,
            b0204,
            c0204,
            d0204,
            e0204,
            a0205,
            b0205,
            c0205,
            d0205,
            e0205,
            a021,
            b021,
            c021,
            d021,
            e021,
            a0211,
            b0211,
            c0211,
            d0211,
            e0211,
            a0212,
            b0212,
            c0212,
            d0212,
            e0212,
            a0213,
            b0213,
            c0213,
            d0213,
            e0213,
            a0214,
            b0214,
            c0214,
            d0214,
            e0214,
            a0215,
            b0215,
            c0215,
            d0215,
            e0215,
            a022,
            b022,
            c022,
            d022,
            e022,
            a0221,
            b0221,
            c0221,
            d0221,
            e0221,
            a0222,
            b0222,
            c0222,
            d0222,
            e0222,
            a0223,
            b0223,
            c0223,
            d0223,
            e0223,
            a0224,
            b0224,
            c0224,
            d0224,
            e0224,
            a0225,
            b0225,
            c0225,
            d0225,
            e0225,
            a023,
            b023,
            c023,
            d023,
            e023,
            a0231,
            b0231,
            c0231,
            d0231,
            e0231,
            a0232,
            b0232,
            c0232,
            d0232,
            e0232,
            a0233,
            b0233,
            c0233,
            d0233,
            e0233,
            a0234,
            b0234,
            c0234,
            d0234,
            e0234,
            a0235,
            b0235,
            c0235,
            d0235,
            e0235,
            a024,
            b024,
            c024,
            d024,
            e024,
            a0241,
            b0241,
            c0241,
            d0241,
            e0241,
            a0242,
            b0242,
            c0242,
            d0242,
            e0242,
            a0243,
            b0243,
            c0243,
            d0243,
            e0243,
            a0244,
            b0244,
            c0244,
            d0244,
            e0244,
            a0245,
            b0245,
            c0245,
            d0245,
            e0245,
            a025,
            b025,
            c025,
            d025,
            e025,
            a0251,
            b0251,
            c0251,
            d0251,
            e0251,
            a0252,
            b0252,
            c0252,
            d0252,
            e0252,
            a0253,
            b0253,
            c0253,
            d0253,
            e0253,
            a0254,
            b0254,
            c0254,
            d0254,
            e0254,
            a0255,
            b0255,
            c0255,
            d0255,
            e0255,
            a0261,
            b0261,
            c0261,
            d0261,
            e0261,
            a0262,
            b0262,
            c0262,
            d0262,
            e0262,
            a0263,
            b0263,
            c0263,
            d0263,
            e0263,
            a0264,
            b0264,
            c0264,
            d0264,
            e0264,
            a030 = 601,
            b030,
            c030,
            d030,
            e030,
            a0301,
            b0301,
            c0301,
            d0301,
            e0301,
            a0302,
            b0302,
            c0302,
            d0302,
            e0302,
            a0303,
            b0303,
            c0303,
            d0303,
            e0303,
            a0304,
            b0304,
            c0304,
            d0304,
            e0304,
            a0305,
            b0305,
            c0305,
            d0305,
            e0305,
            a031,
            b031,
            c031,
            d031,
            e031,
            a0311,
            b0311,
            c0311,
            d0311,
            e0311,
            a0312,
            b0312,
            c0312,
            d0312,
            e0312,
            a0313,
            b0313,
            c0313,
            d0313,
            e0313,
            a0314,
            b0314,
            c0314,
            d0314,
            e0314,
            a0315,
            b0315,
            c0315,
            d0315,
            e0315,
            a032,
            b032,
            c032,
            d032,
            e032,
            a0321,
            b0321,
            c0321,
            d0321,
            e0321,
            a0322,
            b0322,
            c0322,
            d0322,
            e0322,
            a0323,
            b0323,
            c0323,
            d0323,
            e0323,
            a0324,
            b0324,
            c0324,
            d0324,
            e0324,
            a0325,
            b0325,
            c0325,
            d0325,
            e0325,
            a033,
            b033,
            c033,
            d033,
            e033,
            a0331,
            b0331,
            c0331,
            d0331,
            e0331,
            a0332,
            b0332,
            c0332,
            d0332,
            e0332,
            a0333,
            b0333,
            c0333,
            d0333,
            e0333,
            a0334,
            b0334,
            c0334,
            d0334,
            e0334,
            a0335,
            b0335,
            c0335,
            d0335,
            e0335,
            a034,
            b034,
            c034,
            d034,
            e034,
            a0341,
            b0341,
            c0341,
            d0341,
            e0341,
            a0342,
            b0342,
            c0342,
            d0342,
            e0342,
            a0343,
            b0343,
            c0343,
            d0343,
            e0343,
            a0344,
            b0344,
            c0344,
            d0344,
            e0344,
            a0345,
            b0345,
            c0345,
            d0345,
            e0345,
            a035,
            b035,
            c035,
            d035,
            e035,
            a0351,
            b0351,
            c0351,
            d0351,
            e0351,
            a0352,
            b0352,
            c0352,
            d0352,
            e0352,
            a0353,
            b0353,
            c0353,
            d0353,
            e0353,
            a0354,
            b0354,
            c0354,
            d0354,
            e0354,
            a0355,
            b0355,
            c0355,
            d0355,
            e0355,
            a0361,
            b0361,
            c0361,
            d0361,
            e0361,
            a0362,
            b0362,
            c0362,
            d0362,
            e0362,
            a0363,
            b0363,
            c0363,
            d0363,
            e0363,
            a0364,
            b0364,
            c0364,
            d0364,
            e0364,
            a040 = 801,
            b040,
            c040,
            d040,
            e040,
            a0401,
            b0401,
            c0401,
            d0401,
            e0401,
            a0402,
            b0402,
            c0402,
            d0402,
            e0402,
            a0403,
            b0403,
            c0403,
            d0403,
            e0403,
            a0404,
            b0404,
            c0404,
            d0404,
            e0404,
            a0405,
            b0405,
            c0405,
            d0405,
            e0405,
            a041,
            b041,
            c041,
            d041,
            e041,
            a0411,
            b0411,
            c0411,
            d0411,
            e0411,
            a0412,
            b0412,
            c0412,
            d0412,
            e0412,
            a0413,
            b0413,
            c0413,
            d0413,
            e0413,
            a0414,
            b0414,
            c0414,
            d0414,
            e0414,
            a0415,
            b0415,
            c0415,
            d0415,
            e0415,
            a042,
            b042,
            c042,
            d042,
            e042,
            a0421,
            b0421,
            c0421,
            d0421,
            e0421,
            a0422,
            b0422,
            c0422,
            d0422,
            e0422,
            a0423,
            b0423,
            c0423,
            d0423,
            e0423,
            a0424,
            b0424,
            c0424,
            d0424,
            e0424,
            a0425,
            b0425,
            c0425,
            d0425,
            e0425,
            a043,
            b043,
            c043,
            d043,
            e043,
            a0431,
            b0431,
            c0431,
            d0431,
            e0431,
            a0432,
            b0432,
            c0432,
            d0432,
            e0432,
            a0433,
            b0433,
            c0433,
            d0433,
            e0433,
            a0434,
            b0434,
            c0434,
            d0434,
            e0434,
            a0435,
            b0435,
            c0435,
            d0435,
            e0435,
            a044,
            b044,
            c044,
            d044,
            e044,
            a0441,
            b0441,
            c0441,
            d0441,
            e0441,
            a0442,
            b0442,
            c0442,
            d0442,
            e0442,
            a0443,
            b0443,
            c0443,
            d0443,
            e0443,
            a0444,
            b0444,
            c0444,
            d0444,
            e0444,
            a0445,
            b0445,
            c0445,
            d0445,
            e0445,
            a045,
            b045,
            c045,
            d045,
            e045,
            a0451,
            b0451,
            c0451,
            d0451,
            e0451,
            a0452,
            b0452,
            c0452,
            d0452,
            e0452,
            a0453,
            b0453,
            c0453,
            d0453,
            e0453,
            a0454,
            b0454,
            c0454,
            d0454,
            e0454,
            a0455,
            b0455,
            c0455,
            d0455,
            e0455,
            a0461,
            b0461,
            c0461,
            d0461,
            e0461,
            a0462,
            b0462,
            c0462,
            d0462,
            e0462,
            a0463,
            b0463,
            c0463,
            d0463,
            e0463,
            a0464,
            b0464,
            c0464,
            d0464,
            e0464,
        }

        public List<EnumContains> value_List;
        public EnumContains[] value_Array;
        public HashSet<EnumContains> value_HashSet;
        public EnumContains value_target;

        public Contains_enum(int count)
        {
            value_List = new List<EnumContains>(count);
            value_Array = new EnumContains[count];
            value_HashSet = new HashSet<EnumContains>();

            var index = XRandom.Next(0, count);
            for (int i = 0; i < count; i++)
            {
                var tmpValue = (EnumContains)XRandom.Next(0, 1000);
                value_List.Add(tmpValue);
                value_Array[i] = tmpValue;
                value_HashSet.Add(tmpValue);

                if (index == i)
                    value_target = tmpValue;
            }
        }
    }
    #endregion enum

    #region class
    [XTest("List<class>")]
    public void test_List_class()
    {
        value_class.value_List.Contains(value_class.value_target);
    }

    [XTest("class[]")]
    public void test_Array_class()
    {
        for (int i = 0; i < count; i++)
        {
            if (value_class.value_Array[i] == value_class.value_target)
                break;
        }
    }

    [XTest("HashSet<class>")]
    public void test_HashSet_class()
    {
        value_class.value_HashSet.Contains(value_class.value_target);
    }

    public class Contains_class
    {
        public class Data
        {
            int a, b, c;
        }

        public List<Data> value_List;
        public Data[] value_Array;
        public HashSet<Data> value_HashSet;
        public Data value_target;

        public Contains_class(int count)
        {
            value_List = new List<Data>(count);
            value_Array = new Data[count];
            value_HashSet = new HashSet<Data>();

            var index = XRandom.Next(0, count);
            for (int i = 0; i < count; i++)
            {
                var tmpValue = new Data();
                value_List.Add(tmpValue);
                value_Array[i] = tmpValue;
                value_HashSet.Add(tmpValue);

                if (index == i)
                    value_target = tmpValue;
            }
        }
    }
    #endregion class

}
